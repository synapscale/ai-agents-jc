import React from 'react';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { SearchIcon, FilterIcon, PlusIcon } from 'lucide-react';

interface NodeSidebarProps {
  onSelectNode: (nodeType: string, category: string) => void;
  onSearch: (query: string) => void;
}

export function NodeSidebar({ onSelectNode, onSearch }: NodeSidebarProps) {
  const [searchQuery, setSearchQuery] = React.useState('');
  const [activeCategory, setActiveCategory] = React.useState('all');
  
  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    onSearch(searchQuery);
  };
  
  const categories = [
    { id: 'entrada', name: 'Entrada de Dados', icon: 'üì•' },
    { id: 'transformacao', name: 'Transforma√ß√£o de Dados', icon: 'üîÑ' },
    { id: 'fluxo', name: 'Fluxo de Controle', icon: 'üîÄ' },
    { id: 'saida', name: 'Sa√≠da de Dados', icon: 'üì§' },
    { id: 'ui', name: 'Elementos de UI', icon: 'üñºÔ∏è' },
    { id: 'ia', name: 'Intelig√™ncia Artificial', icon: 'üß†' },
    { id: 'acao', name: 'A√ß√£o em Aplicativo', icon: 'üîß' },
    { id: 'core', name: 'Core', icon: '‚öôÔ∏è' },
    { id: 'interacao', name: 'Intera√ß√£o Humana', icon: 'üë§' },
    { id: 'gatilhos', name: 'Gatilhos', icon: '‚ö°' }
  ];
  
  const nodesByCategory = {
    'entrada': [
      { id: 'file-input', name: 'Entrada de Arquivo', description: 'Carrega dados de um arquivo' },
      { id: 'text-input', name: 'Entrada de Texto', description: 'Entrada de texto manual' },
      { id: 'api-input', name: 'Entrada de API', description: 'Obt√©m dados de uma API externa' }
    ],
    'transformacao': [
      { id: 'text-transform', name: 'Transforma√ß√£o de Texto', description: 'Manipula e transforma texto' },
      { id: 'data-filter', name: 'Filtro de Dados', description: 'Filtra dados com base em crit√©rios' },
      { id: 'data-merge', name: 'Mesclagem de Dados', description: 'Combina m√∫ltiplas fontes de dados' }
    ],
    'fluxo': [
      { id: 'condition', name: 'Condi√ß√£o', description: 'Executa l√≥gica condicional' },
      { id: 'loop', name: 'Loop', description: 'Repete opera√ß√µes em uma cole√ß√£o' },
      { id: 'switch', name: 'Switch', description: 'Direciona fluxo com base em m√∫ltiplas condi√ß√µes' }
    ],
    'saida': [
      { id: 'file-output', name: 'Sa√≠da para Arquivo', description: 'Salva dados em um arquivo' },
      { id: 'visualization', name: 'Visualiza√ß√£o', description: 'Cria visualiza√ß√µes de dados' },
      { id: 'api-output', name: 'Sa√≠da para API', description: 'Envia dados para uma API externa' }
    ],
    'ui': [
      { id: 'form', name: 'Formul√°rio', description: 'Cria formul√°rios interativos' },
      { id: 'chart', name: 'Gr√°fico', description: 'Exibe dados em formato gr√°fico' },
      { id: 'table', name: 'Tabela', description: 'Exibe dados em formato tabular' }
    ],
    'ia': [
      { id: 'text-generation', name: 'Gera√ß√£o de Texto', description: 'Gera texto com IA' },
      { id: 'classification', name: 'Classifica√ß√£o', description: 'Classifica dados com IA' },
      { id: 'sentiment-analysis', name: 'An√°lise de Sentimento', description: 'Analisa sentimento de texto' }
    ],
    'acao': [
      { id: 'email-send', name: 'Envio de Email', description: 'Envia emails automaticamente' },
      { id: 'notification', name: 'Notifica√ß√£o', description: 'Envia notifica√ß√µes' },
      { id: 'webhook', name: 'Webhook', description: 'Aciona webhooks externos' }
    ],
    'core': [
      { id: 'variable', name: 'Vari√°vel', description: 'Armazena e gerencia vari√°veis' },
      { id: 'function', name: 'Fun√ß√£o', description: 'Define fun√ß√µes reutiliz√°veis' },
      { id: 'timer', name: 'Temporizador', description: 'Controla opera√ß√µes baseadas em tempo' }
    ],
    'interacao': [
      { id: 'user-input', name: 'Entrada do Usu√°rio', description: 'Solicita entrada do usu√°rio' },
      { id: 'confirmation', name: 'Confirma√ß√£o', description: 'Solicita confirma√ß√£o do usu√°rio' },
      { id: 'feedback', name: 'Feedback', description: 'Coleta feedback do usu√°rio' }
    ],
    'gatilhos': [
      { id: 'schedule', name: 'Agendamento', description: 'Executa em hor√°rios programados' },
      { id: 'event', name: 'Evento', description: 'Responde a eventos do sistema' },
      { id: 'webhook-trigger', name: 'Gatilho de Webhook', description: 'Responde a webhooks recebidos' }
    ]
  };
  
  const allNodes = Object.values(nodesByCategory).flat();
  
  const displayNodes = activeCategory === 'all' 
    ? allNodes 
    : nodesByCategory[activeCategory as keyof typeof nodesByCategory] || [];
  
  return (
    <div className="h-full flex flex-col border-r">
      <div className="p-4 border-b">
        <h2 className="text-lg font-medium mb-4">Nodes</h2>
        
        <form onSubmit={handleSearch} className="relative mb-4">
          <SearchIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
          <Input
            placeholder="Buscar nodes..."
            className="pl-9"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </form>
        
        <Tabs value={activeCategory} onValueChange={setActiveCategory}>
          <TabsList className="grid grid-cols-2 w-full mb-4">
            <TabsTrigger value="all">Todos</TabsTrigger>
            <TabsTrigger value="favorites">Favoritos</TabsTrigger>
          </TabsList>
        </Tabs>
      </div>
      
      <div className="flex-1 overflow-auto">
        <div className="p-4">
          <h3 className="text-sm font-medium mb-3">Categorias</h3>
          
          <div className="space-y-1">
            {categories.map((category) => (
              <Button
                key={category.id}
                variant={activeCategory === category.id ? "secondary" : "ghost"}
                className="w-full justify-start"
                onClick={() => setActiveCategory(category.id)}
              >
                <span className="mr-2">{category.icon}</span>
                {category.name}
              </Button>
            ))}
          </div>
        </div>
        
        <div className="border-t p-4">
          <div className="flex items-center justify-between mb-3">
            <h3 className="text-sm font-medium">Nodes</h3>
            <Button variant="ghost" size="icon">
              <FilterIcon className="h-4 w-4" />
            </Button>
          </div>
          
          <div className="space-y-2">
            {displayNodes.map((node) => (
              <Card
                key={node.id}
                className="p-3 cursor-pointer hover:bg-accent"
                onClick={() => onSelectNode(node.id, activeCategory)}
              >
                <div className="font-medium">{node.name}</div>
                <div className="text-xs text-muted-foreground">{node.description}</div>
              </Card>
            ))}
          </div>
        </div>
      </div>
      
      <div className="p-4 border-t">
        <Button className="w-full" onClick={() => {}}>
          <PlusIcon className="h-4 w-4 mr-2" />
          Criar Node Personalizado
        </Button>
      </div>
    </div>
  );
}
